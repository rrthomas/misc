#!/usr/bin/env lua
local spec = [[
softwrap 0.37
Copyright (c) 2017 Reuben Thomas <rrt@sc3d.org>

Usage: softwrap FILE...

Convert hard-wrapped text files into soft-wrapped ones.

Options:

  -w, --width=N     set the minimum width in characters of the first
                    line of a paragraph [default: 65]
  -l, --latex       LaTeX mode: comments and lines starting with
                    \begin, \end or \item, or containing \\ or &, are
                    not wrapped
  -n, --nuweb       Nuweb mode: implies LaTeX mode, and chunks
                    (between @{ and @}) will not be wrapped
      --help        display this help, then exit
      --version     display version information, then exit
]]

require "std".barrel ()
local std = require "std"


-- Default options
local opts
local minWidth = 65
local nuweb, latex, width

-- wrapLines: soft-wrap a list of text lines into paragraphs
--   width: the minimum width of the first line of a paragraph
--   line: list of text lines
-- returns
--   para: list of paragraphs
local function wrapLines (line)
  local wrapped, i, lines = {}, 1, #line
  repeat
    while i <= lines and (not nuweb or
                          not (string.find (line[i], "@{")))
      and (string.len (line[i]) < width or
           (latex and (string.find (line[i], "[^\\]%%") or
                       string.find (line[i], "\\\\") or
                         string.find (line[i], "&%s*$"))))
    do
      table.insert (wrapped, line[i])
      i = i + 1
    end
    if i <= lines and (nuweb and string.find (line[i], "@{")) then
      while i < #line and not (string.find (line[i], "@}")) do
        table.insert (wrapped, line[i])
        i = i + 1
      end
    end
    if i <= lines then
      table.insert (wrapped, line[i])
      i = i + 1
    end
    while i <= lines and string.len (line[i]) > 0 and
      string.sub (line[i], 1, 1) ~= " " and
      not (nuweb and string.find (line[i], "@{")) and
      not (latex and (string.find (#wrapped, "\\\\") or
                      (string.find (line[i], "\\begin") or
                       string.find (line[i], "\\end") or
                         string.find (line[i], "\\item"))))
    do
      wrapped[#wrapped] = wrapped[#wrapped] ..
        " " .. line[i]
      i = i + 1
    end
  until i > lines
  for j = 1, #wrapped do
    wrapped[j] = wrapped[j] .. "\n"
  end
  return wrapped
end

-- Process a file
local function softwrap ()
  local line = wrapLines (io.readlines ())
  io.stdin:close () -- close the input file
  std.functional.map (io.write, std.ielems, line)
end

-- Main routine
local OptionParser = require "std.optparse"
local parser = OptionParser (spec)
_G.arg, opts = parser:parse (_G.arg)
width = opts.width and 1 or minWidth
nuweb = opts.nuweb and 1
latex = opts.latex and 1 or nuweb
io.process_files (softwrap)
